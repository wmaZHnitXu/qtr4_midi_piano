using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using System.Threading;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

namespace System.Hooks
{

    public enum GETMESSAGE_Messages:int
    {
        PM_NOREMOVE = 0x0000,
        PM_REMOVE  =  0x0001
    }



    /// <summary>
    /// The system calls this function before calling the window procedure to process a message sent to the thread. You can modify the message sent to the App, but set Intercept to false if you modify.
    /// </summary>
    public class WH_GETMESSAGE : IHook
    {
        public int Code { get; private set; }
        public IntPtr wParam { get; private set; }
        public IntPtr lParam { get; private set; }
        public Process Caller { get; private set; }
        public DateTime Time { get; private set; }

        /// <summary>
        /// The system calls this function after an input event occurs in a dialog box, message box, menu, or scroll bar, but before the message generated by the input event is processed. 
        /// </summary>
        new public const string Description = "The system calls this function after an input event occurs in a dialog box, message box, menu, or scroll bar, but before the message generated by the input event is processed. ";

        /// <summary>
        /// Specifies whether the hook procedure can be intercepted
        /// </summary>
        public override bool InterceptEffective
        {
            get
            {
                return true;
            }
        }


        public GETMESSAGE_Messages Attachment
        {
            get { return (GETMESSAGE_Messages)wParam; }
        }


        Message _msg;
        /// <summary>
        /// The message to be returned to the Process, can be changed by you and will be written to process target.
        /// </summary>
        public Message Message
        {
            get
            {
                return _msg;
            }
            set
            {
                //Todo: All Intptrs have to be mapped to target process. This will work only if no struct is assosiated with lparam or wparam
                _msg = value;
                var tmp = new MSG();
                tmp.hwnd = _msg.HWnd;
                tmp.wParam = _msg.WParam;
                tmp.lParam = _msg.LParam;
                tmp.message = (uint)_msg.Msg;
                tmp.pt = new POINT(0, 0);


                MarshalHelper.WriteStructToProcess<MSG>(Caller, lParam, tmp);
            }
        }



        public override string ToString()
        {
            if (Attachment == GETMESSAGE_Messages.PM_NOREMOVE) 
            {
                return Caller.ProcessName + " PeekMessage will return: " + Message;
            }
            if (Attachment == GETMESSAGE_Messages.PM_REMOVE) 
            {
                return Caller.ProcessName + " GetMessage will return: " + Message;
            }
            return "";
        }



        /// <summary>
        /// This hook can change recieving events before they enter the application. Set Intercept to false if you override the message
        /// </summary>
        public WH_GETMESSAGE(HookArguments Msg) : base(Msg)
        {
            if (Msg == null) { return; }

            this.Code = Msg.nCode;
            this.wParam = Msg.wParam;
            this.lParam = Msg.lParam;
            this.Caller = Msg.Process;
            this.Time = Msg.TimeStamp;

            var message = MarshalHelper.GetStructFromProcess<MSG>(Caller, lParam);
            _msg = Message.Create(message.hwnd, (int)message.message, message.wParam, message.lParam);
        }

    }
}
